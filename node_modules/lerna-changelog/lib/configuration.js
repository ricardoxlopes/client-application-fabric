"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var execa = require("execa");
var normalize = require("normalize-git-url");
var configuration_error_1 = require("./configuration-error");
function fromGitRoot(cwd) {
    var rootPath = execa.sync("git", ["rev-parse", "--show-toplevel"], { cwd: cwd }).stdout;
    return fromPath(rootPath);
}
exports.fromGitRoot = fromGitRoot;
function fromPath(rootPath) {
    var config = fromPackageConfig(rootPath) || fromLernaConfig(rootPath) || guessConfig(rootPath);
    if (!config) {
        throw new configuration_error_1.default("Missing changelog config in `lerna.json`.\n" +
            "See docs for setup: https://github.com/lerna/lerna-changelog#readme");
    }
    config.rootPath = rootPath;
    return config;
}
exports.fromPath = fromPath;
function fromLernaConfig(rootPath) {
    var lernaPath = path.join(rootPath, "lerna.json");
    if (fs.existsSync(lernaPath)) {
        return JSON.parse(fs.readFileSync(lernaPath)).changelog;
    }
}
function fromPackageConfig(rootPath) {
    var pkgPath = path.join(rootPath, "package.json");
    if (fs.existsSync(pkgPath)) {
        return JSON.parse(fs.readFileSync(pkgPath)).changelog;
    }
}
function guessConfig(rootPath) {
    var repo = findRepo(rootPath);
    if (!repo) {
        return;
    }
    var labels = {
        "enhancement": ":rocket: Enhancement",
        "bug": ":bug: Bug Fix",
    };
    return { repo: repo, labels: labels };
}
function findRepo(rootPath) {
    var pkgPath = path.join(rootPath, "package.json");
    if (!fs.existsSync(pkgPath)) {
        return;
    }
    var pkg = JSON.parse(fs.readFileSync(pkgPath));
    if (!pkg.repository) {
        return;
    }
    return findRepoFromPkg(pkg);
}
function findRepoFromPkg(pkg) {
    var url = pkg.repository.url || pkg.repository;
    var normalized = normalize(url).url;
    var match = normalized.match(/github\.com[:/]([^./]+\/[^./]+)(?:\.git)?/);
    if (!match) {
        return;
    }
    return match[1];
}
exports.findRepoFromPkg = findRepoFromPkg;
