"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var pMap = require("p-map");
var progress_bar_1 = require("./progress-bar");
var remote_repo_1 = require("./remote-repo");
var Configuration = require("./configuration");
var find_pull_request_id_1 = require("./find-pull-request-id");
var Git = require("./git");
var markdown_renderer_1 = require("./markdown-renderer");
var UNRELEASED_TAG = "___unreleased___";
var Changelog = (function () {
    function Changelog(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.config = this.getConfig();
        this.remote = new remote_repo_1.default(this.config);
        this.renderer = new markdown_renderer_1.default({
            categories: Object.keys(this.config.labels).map(function (key) { return _this.config.labels[key]; }),
            baseIssueUrl: this.remote.getBaseIssueUrl(),
        });
        this.tagFrom = options["tag-from"];
        this.tagTo = options["tag-to"];
    }
    Changelog.prototype.getConfig = function () {
        return Configuration.fromGitRoot(process.cwd());
    };
    Changelog.prototype.getCommitInfos = function () {
        return __awaiter(this, void 0, void 0, function () {
            var commits, commitInfos;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getListOfCommits()];
                    case 1:
                        commits = _a.sent();
                        return [4, this.toCommitInfos(commits)];
                    case 2:
                        commitInfos = _a.sent();
                        return [4, this.downloadIssueData(commitInfos)];
                    case 3:
                        _a.sent();
                        this.fillInCategories(commitInfos);
                        return [4, this.fillInPackages(commitInfos)];
                    case 4:
                        _a.sent();
                        return [2, commitInfos];
                }
            });
        });
    };
    Changelog.prototype.listReleases = function () {
        return __awaiter(this, void 0, void 0, function () {
            var commits, releases;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getCommitInfos()];
                    case 1:
                        commits = _a.sent();
                        releases = this.groupByRelease(commits);
                        return [4, this.fillInContributors(releases)];
                    case 2:
                        _a.sent();
                        return [2, releases];
                }
            });
        });
    };
    Changelog.prototype.createMarkdown = function () {
        return __awaiter(this, void 0, void 0, function () {
            var releases;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.listReleases()];
                    case 1:
                        releases = _a.sent();
                        return [2, this.renderer.renderMarkdown(releases)];
                }
            });
        });
    };
    Changelog.prototype.getListOfUniquePackages = function (sha) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Git.changedPaths(sha)];
                    case 1: return [2, (_a.sent())
                            .map(function (path) { return path.indexOf("packages/") === 0 ? path.slice(9).split("/", 1)[0] : ""; })
                            .filter(Boolean)
                            .filter(onlyUnique)];
                }
            });
        });
    };
    Changelog.prototype.getListOfCommits = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tagFrom, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.tagFrom;
                        if (_a) return [3, 2];
                        return [4, Git.lastTag()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        tagFrom = _a;
                        return [2, Git.listCommits(tagFrom, this.tagTo)];
                }
            });
        });
    };
    Changelog.prototype.getCommitters = function (commits) {
        return __awaiter(this, void 0, void 0, function () {
            var committers, _i, commits_1, commit, issue, login, shouldKeepCommiter, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        committers = {};
                        _i = 0, commits_1 = commits;
                        _c.label = 1;
                    case 1:
                        if (!(_i < commits_1.length)) return [3, 4];
                        commit = commits_1[_i];
                        issue = commit.githubIssue;
                        login = issue && issue.user.login;
                        shouldKeepCommiter = login && !this.ignoreCommitter(login);
                        if (!(login && shouldKeepCommiter && !committers[login])) return [3, 3];
                        _a = committers;
                        _b = login;
                        return [4, this.remote.getUserData(login)];
                    case 2:
                        _a[_b] = _c.sent();
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2, Object.keys(committers).map(function (k) { return committers[k]; })];
                }
            });
        });
    };
    Changelog.prototype.ignoreCommitter = function (login) {
        if (!this.config.ignoreCommitters) {
            return false;
        }
        return this.config.ignoreCommitters.some(function (c) { return c === login || login.indexOf(c) > -1; });
    };
    Changelog.prototype.toCommitInfos = function (commits) {
        return __awaiter(this, void 0, void 0, function () {
            var allTags;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Git.listTagNames()];
                    case 1:
                        allTags = _a.sent();
                        return [2, commits.map(function (commit) {
                                var sha = commit.sha, refName = commit.refName, message = commit.summary, date = commit.date;
                                var tagsInCommit;
                                if (refName.length > 1) {
                                    tagsInCommit = allTags.filter(function (tag) { return refName.indexOf(tag) !== -1; });
                                }
                                var issueNumber = find_pull_request_id_1.default(message);
                                return {
                                    commitSHA: sha,
                                    message: message,
                                    tags: tagsInCommit,
                                    issueNumber: issueNumber,
                                    date: date,
                                };
                            })];
                }
            });
        });
    };
    Changelog.prototype.downloadIssueData = function (commitInfos) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        progress_bar_1.default.init(commitInfos.length);
                        return [4, pMap(commitInfos, function (commitInfo) { return __awaiter(_this, void 0, void 0, function () {
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            progress_bar_1.default.setTitle(commitInfo.commitSHA);
                                            if (!commitInfo.issueNumber) return [3, 2];
                                            _a = commitInfo;
                                            return [4, this.remote.getIssueData(commitInfo.issueNumber)];
                                        case 1:
                                            _a.githubIssue = _b.sent();
                                            _b.label = 2;
                                        case 2:
                                            progress_bar_1.default.tick();
                                            return [2];
                                    }
                                });
                            }); }, { concurrency: 5 })];
                    case 1:
                        _a.sent();
                        progress_bar_1.default.terminate();
                        return [2];
                }
            });
        });
    };
    Changelog.prototype.groupByRelease = function (commits) {
        var releaseMap = {};
        var currentTags = [UNRELEASED_TAG];
        for (var _i = 0, commits_2 = commits; _i < commits_2.length; _i++) {
            var commit = commits_2[_i];
            if (commit.tags && commit.tags.length > 0) {
                currentTags = commit.tags;
            }
            for (var _a = 0, currentTags_1 = currentTags; _a < currentTags_1.length; _a++) {
                var currentTag = currentTags_1[_a];
                if (!releaseMap[currentTag]) {
                    var date = currentTag === UNRELEASED_TAG ? this.getToday() : commit.date;
                    releaseMap[currentTag] = { name: currentTag, date: date, commits: [] };
                }
                releaseMap[currentTag].commits.push(commit);
            }
        }
        return Object.keys(releaseMap).map(function (tag) { return releaseMap[tag]; });
    };
    Changelog.prototype.getToday = function () {
        var date = new Date().toISOString();
        return date.slice(0, date.indexOf("T"));
    };
    Changelog.prototype.fillInCategories = function (commits) {
        var _this = this;
        var _loop_1 = function (commit) {
            if (!commit.githubIssue)
                return "continue";
            var labels = commit.githubIssue.labels.map(function (label) { return label.name.toLowerCase(); });
            commit.categories = Object.keys(this_1.config.labels)
                .filter(function (label) { return labels.indexOf(label.toLowerCase()) !== -1; })
                .map(function (label) { return _this.config.labels[label]; });
        };
        var this_1 = this;
        for (var _i = 0, commits_3 = commits; _i < commits_3.length; _i++) {
            var commit = commits_3[_i];
            _loop_1(commit);
        }
    };
    Changelog.prototype.fillInPackages = function (commits) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        progress_bar_1.default.init(commits.length);
                        return [4, pMap(commits, function (commit) { return __awaiter(_this, void 0, void 0, function () {
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            progress_bar_1.default.setTitle(commit.commitSHA);
                                            _a = commit;
                                            return [4, this.getListOfUniquePackages(commit.commitSHA)];
                                        case 1:
                                            _a.packages = _b.sent();
                                            progress_bar_1.default.tick();
                                            return [2];
                                    }
                                });
                            }); }, { concurrency: 5 })];
                    case 1:
                        _a.sent();
                        progress_bar_1.default.terminate();
                        return [2];
                }
            });
        });
    };
    Changelog.prototype.fillInContributors = function (releases) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, releases_1, release, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _i = 0, releases_1 = releases;
                        _b.label = 1;
                    case 1:
                        if (!(_i < releases_1.length)) return [3, 4];
                        release = releases_1[_i];
                        _a = release;
                        return [4, this.getCommitters(release.commits)];
                    case 2:
                        _a.contributors = _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    return Changelog;
}());
exports.default = Changelog;
function onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
}
