"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const server_1 = require("react-dom/server");
const { load } = require('load-asciicast');
const color = require('./color');
const Background = require('./Background');
const Cursor = require('./Cursor');
const Document = require('./Document');
const Frame = require('./Frame');
const Reel = require('./Reel');
const Registry = require('./Registry');
const Viewbox = require('./Viewbox');
const Window = require('./Window');
const Word = require('./Word');
const styled = require('./styled');
const toViewModel = require('./to-view-model');
const DEFAULT_THEME = require('./default-theme');
const StyledContainer = styled.g `
  font-family: Monaco, Consolas, Menlo, 'Bitstream Vera Sans Mono', 'Powerline Symbols', monospace;
`;
function render(raw, options = {}) {
    if (!raw) {
        throw new TypeError(`svg-term.reder: missing data`);
    }
    const paddingX = typeof options.paddingX === 'number' ? options.paddingX : 0;
    const paddingY = typeof options.paddingY === 'number' ? options.paddingY : 0;
    const theme = options.theme || DEFAULT_THEME;
    theme.fontSize = 'fontSize' in theme ? theme.fontSize : DEFAULT_THEME.fontSize;
    theme.lineHeight = 'lineHeight' in theme ? theme.lineHeight : DEFAULT_THEME.lineHeight;
    const json = toJSON(raw);
    const cast = load(json, options.width, typeof options.height === 'number' ? options.height + 1 : undefined);
    const bound = { from: options.from, to: options.to, at: options.at, cast };
    const data = toViewModel({
        cast,
        cursor: options.cursor,
        height: options.height,
        theme,
        from: from(bound),
        to: to(bound)
    });
    return server_1.renderToStaticMarkup(React.createElement(Window, { decorations: options.window, width: data.width, height: data.displayHeight, theme: theme, paddingX: paddingX, paddingY: paddingY },
        React.createElement(Document, { width: data.width, height: data.displayHeight, theme: theme, x: options.window ? 15 + paddingX : options.paddingX, y: options.window ? 50 + paddingY : options.paddingY },
            React.createElement(StyledContainer, { fontSize: theme.fontSize },
                React.createElement(Registry, { frameHeight: cast.height, frameWidth: cast.width, hasCursors: data.frames.some((frame) => frame.cursor.visible), hasFrames: data.frames.length > 0, items: data.registry, theme: theme }),
                React.createElement(Background, { width: data.width, height: data.displayHeight, theme: theme }),
                React.createElement(Reel, { duration: data.duration, frameWidth: cast.width, stamps: data.stamps, width: data.frames.length * cast.width }, data.frames
                    .map((frame, index) => {
                    return (React.createElement(Frame, { key: frame.stamp, stamp: frame.stamp, offset: index, width: data.width, height: data.displayHeight },
                        frame.cursor.visible &&
                            React.createElement("use", { xlinkHref: "#b", x: frame.cursor.x - theme.fontSize * 1.2, y: frame.cursor.y === 0 ? 0 : frame.cursor.y + theme.lineHeight * 0.75 }),
                        frame.lines.map((line, index) => {
                            if (typeof line.id === 'number') {
                                return (React.createElement("use", { key: `${line.id}-${index}`, xlinkHref: `#${line.id}`, y: line.y }));
                            }
                            return line.words.map((word) => {
                                return (React.createElement(Word, { bg: word.attr.bg, bold: word.attr.bold, fg: word.attr.fg, inverse: word.attr.inverse, theme: theme, underline: word.attr.underline, x: word.x, y: line.y + theme.fontSize }, word.children));
                            });
                        })));
                }))))));
}
exports.render = render;
function toJSON(raw) {
    if (typeof raw === 'string') {
        return raw;
    }
    return JSON.stringify(raw);
}
const NOOP = () => true;
const MAX = (max) => ([f]) => f <= max;
const MIN = (min) => ([f]) => f >= min;
function nearest(stamp, { cast, max, min }) {
    return cast.frames
        .filter(typeof max === 'number' && !isNaN(max) ? MAX(max) : NOOP)
        .filter(typeof min === 'number' && !isNaN(min) ? MIN(min) : NOOP)
        .sort(([a], [b]) => Math.abs((stamp - a)) - Math.abs((stamp - b)))[0][0];
}
function from(options) {
    const { at, from, to, cast } = options;
    if (typeof at === 'number') {
        return nearest(at / 1000, { cast });
    }
    return typeof from === 'number' && !isNaN(from)
        ? nearest(from / 1000, { cast, min: from / 1000 })
        : 0;
}
function to(options) {
    const { at, from, to, cast } = options;
    if (typeof at === 'number') {
        return nearest(at / 1000, { cast });
    }
    return typeof to === 'number' && !isNaN(from)
        ? nearest(to / 1000, { cast, max: to / 1000 })
        : cast.duration;
}
//# sourceMappingURL=index.js.map