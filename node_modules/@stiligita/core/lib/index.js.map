{"version":3,"sources":["../src/index.js"],"names":["styled","tag","props","strings","args","createComponent","use","plugin","before","forEach"],"mappings":";;;;;;AAAA;;AACA;;AACA;AACA;;AAEA;;;;;;;;;;;;;;AAcA,SAASA,MAAT,CAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;AAC1B,SAAO,CAACC,OAAD,EAAU,GAAGC,IAAb,KAAsB;AAC3B;AACA;AACA;AACA,WAAO,YAAOC,eAAP,CAAuBF,OAAvB,EAAgCC,IAAhC,EAAsCH,GAAtC,EAA2CC,KAA3C,CAAP;AACD,GALD;AAMD;;AAED;AACA;AACAF,OAAOM,GAAP,GAAaC,UAAU,YAAOD,GAAP,CAAWC,MAAX,CAAvB;AACAP,OAAOQ,MAAP,GAAgBD,UAAU,YAAOC,MAAP,CAAcD,MAAd,CAA1B;;AAEA;AACA,yBAAYE,OAAZ,CAAoBR,OAAO;AACzBD,SAAOC,GAAP,IAAc,CAACE,OAAD,EAAU,GAAGC,IAAb,KAAsB,YAAOC,eAAP,CAAuBF,OAAvB,EAAgCC,IAAhC,EAAsCH,GAAtC,CAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CATD;;kBAWeD,M","file":"index.js","sourcesContent":["import {domElements} from '@stiligita/dom-elements'\nimport {render} from '@stiligita/dom'\n// Future API\n// import {ATTRIBUTES, CONFIGURATION} from '@stiligita/constants'\n\n/**\n * Styled can be called as a function to allow setting properties.\n * This can be used in different ways to create APIs for several renderers.\n * If called as a function the props will be added as an argument to the\n * same render method. To understand how props are used, look into the renderer\n * {@link createReactComponent}\n *\n * @param {String} tag\n *   The tagName that should be used when rendering the final element\n * @param {Object} props\n *   An object that will be passed to the renderer.\n *   To understand how props are used, look into the renderer.\n * @return {*}  inherits the return of the assigned renderer\n */\nfunction styled(tag, props) {\n  return (strings, ...args) => {\n    // The render.createComponent calls an assigned renderer\n    // To understand what this call does you might need to look into the\n    // renderer {@link createReactComponent}\n    return render.createComponent(strings, args, tag, props)\n  }\n}\n\n// Add static `use` to allow setting plugins from `styled`\n// prevents having to expose the entire render instance\nstyled.use = plugin => render.use(plugin)\nstyled.before = plugin => render.before(plugin)\n\n// Add literals for each DOM element\ndomElements.forEach(tag => {\n  styled[tag] = (strings, ...args) => render.createComponent(strings, args, tag)\n  // Future API\n  // styled[tag].attrs = attrs =>\n  //   (strings, ...args) =>\n  //     render.createComponent(strings, args, tag, Object.assign({}, attrs, {[ATTRIBUTES]: true}))\n  // styled[tag].config = config =>\n  //   (strings, ...args) =>\n  //     render.createComponent(strings, args, tag, Object.assign({}, config, {[CONFIGURATION]: true}))\n})\n\nexport default styled\n"]}