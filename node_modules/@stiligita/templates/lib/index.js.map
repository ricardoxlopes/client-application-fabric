{"version":3,"sources":["../src/index.js"],"names":["templateWithProps","strings","args","props","map","str","i","dynamic","TypeError","join","templateWithVars"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;AAYO,IAAMA,gDAAoB,SAApBA,iBAAoB,CAACC,OAAD,EAAUC,IAAV;AAAA,MAAgBC,KAAhB,uEAAwB,EAAxB;AAAA,SAA+BF,QAAQG,GAAR,CAAY,UAACC,GAAD,EAAMC,CAAN,EAAY;AACtF,QAAMC,UAAU,yBAAaL,KAAKI,CAAL,CAAb,CAAhB;AACA,mBAAeC,OAAf,yCAAeA,OAAf;AACE,WAAK,UAAL;AACE,oBAAUF,GAAV,GAAgB,yBAAaE,QAAQJ,KAAR,CAAb,CAAhB;AACF,WAAK,QAAL;AACE,oBAAUE,GAAV,GAAgBE,OAAhB;AACF;AACE,cAAM,IAAIC,SAAJ,4CAAsDD,OAAtD,yCAAsDA,OAAtD,GAAN;AANJ;AAQD,GAV+D,EAU7DE,IAV6D,CAUxD,EAVwD,CAA/B;AAAA,CAA1B;;AAYP;;;;;;;;;AASO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACT,OAAD,EAAUC,IAAV;AAAA,SAAmBD,QAAQG,GAAR,CAAY,UAACC,GAAD,EAAMC,CAAN,EAAY;AACzE,QAAMC,UAAU,yBAAaL,KAAKI,CAAL,CAAb,CAAhB;AACA,mBAAeC,OAAf,yCAAeA,OAAf;AACE,WAAK,QAAL;AACE,oBAAUF,GAAV,GAAgBE,OAAhB;AACF;AACE,cAAM,IAAIC,SAAJ,4CAAsDD,OAAtD,yCAAsDA,OAAtD,GAAN;AAJJ;AAMD,GARkD,EAQhDE,IARgD,CAQ3C,EAR2C,CAAnB;AAAA,CAAzB;;kBAUQ;AACbT,sCADa;AAEbU;AAFa,C","file":"index.js","sourcesContent":["import {ensureTruthy} from '@stiligita/utils'\n\n/**\n * Creates CSS from a list of strings and interpolations.\n * If interpolations are functions they may be called with `props`\n *\n * @param {Array} strings\n *   everything that is not an interpolation\n * @param {Array} args\n *   The interpolations\n * @param {Object} props\n *   The properties used to resolve the interpolated functions\n * @return {String}\n */\nexport const templateWithProps = (strings, args, props = {}) => strings.map((str, i) => {\n  const dynamic = ensureTruthy(args[i])\n  switch (typeof dynamic) {\n    case 'function':\n      return `${str}${ensureTruthy(dynamic(props))}`\n    case 'string':\n      return `${str}${dynamic}`\n    default:\n      throw new TypeError(`Cannot create stylesheet from ${typeof dynamic}`)\n  }\n}).join('')\n\n/**\n * Creates CSS from a list of strings and interpolations.\n *\n * @param {Array} strings\n *   everything that is not an interpolation\n * @param {Array} args\n *   The interpolations\n * @return {String}\n */\nexport const templateWithVars = (strings, args) => strings.map((str, i) => {\n  const dynamic = ensureTruthy(args[i])\n  switch (typeof dynamic) {\n    case 'string':\n      return `${str}${dynamic}`\n    default:\n      throw new TypeError(`Cannot create stylesheet from ${typeof dynamic}`)\n  }\n}).join('')\n\nexport default {\n  templateWithProps,\n  templateWithVars\n}\n"]}