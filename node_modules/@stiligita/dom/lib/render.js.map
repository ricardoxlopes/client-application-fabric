{"version":3,"sources":["../src/render.js"],"names":["simpleProcessor","key","content","simplePreProcessor","rules","simpleGetName","name","simpleCreateComponent","Renderer","processCSS","bind","createComponent","use","before","plugin","stiligita","methods"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;;;;;;AASA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,OAAN;AAAA,SAAkBD,MAASA,GAAT,SAAgBC,OAAhB,SAA6BA,OAA/C;AAAA,CAAxB;AACA,IAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,SAASC,KAAT;AAAA,CAA3B;AACA,IAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,SAAQC,IAAR;AAAA,CAAtB;AACA;AACA,IAAMC,wBAAwB,SAAxBA,qBAAwB;AAAA,SAAM,YAAM,CAAE,CAAd;AAAA,CAA9B;;AAEA;;;;;;;;;IAQMC,Q;AACJ,sBAAc;AAAA;;AACZ,qCAAsBL,kBAAtB;AACA,iCAAkBH,eAAlB;AACA,gCAAiBK,aAAjB;AACA,wCAAyBE,qBAAzB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKE,GAAL,GAAW,KAAKA,GAAL,CAASF,IAAT,CAAc,IAAd,CAAX;AACA,SAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd;AACD;;AAED;;;;;;;;;;;wBAOII,M,EAAQ;AACV,WAAKA,OAAOC,SAAZ,IAAyBD,MAAzB;AACA,aAAO,KAAKE,OAAZ;AACD;;AAED;;;;;;;;;;2BAOOF,M,EAAQ;AACb,cAAQA,OAAOC,SAAf;AACE;AACE,2CAAsBD,MAAtB;AACA;AACF;AACE;AALJ;AAOA,aAAO,KAAKE,OAAZ;AACD;;;;;AASD;;;;;;oCAMuB;AACrB,aAAO,qDAAP;AACD;;AAED;;;;;;;;;iCAMoB;AAClB,aAAO,iDAAP;AACD;;AAED;;;;;;;;;8BAMiB;AACf,aAAO,gDAAP;AACD;;AAED;;;;;;;;;sCAMyB;AACvB,aAAO,wDAAP;AACD;;;wBA7Ca;AACZ,aAAO;AACLH,gBAAQ,KAAKA,MADR;AAELD,aAAK,KAAKA;AAFL,OAAP;AAID;;;;;;AA2CH;;;kBACe,IAAIJ,QAAJ,E","file":"render.js","sourcesContent":["import {GET_NAME, PRE_PROCESSOR, PROCESSOR, CREATE_COMPONENT} from '@stiligita/constants'\n\n/**\n * A simple CSS processor that simply wraps rules in a selector if present\n *\n * @param {String|boolean} key\n *   The selector\n * @param {String} content\n * The style rules\n * @return {String}\n */\nconst simpleProcessor = (key, content) => key ? `${key}{${content}}` : content\nconst simplePreProcessor = rules => rules\nconst simpleGetName = name => name\n// @todo Add something more meaningfull here\nconst simpleCreateComponent = () => () => {}\n\n/**\n * Private render class. Hnadles the entire rendering logic.\n * Provides a plugin mechanism that allows to set different processors or\n * renderers\n *\n * @private\n * @class Renderer\n */\nclass Renderer {\n  constructor() {\n    this[PRE_PROCESSOR] = simplePreProcessor\n    this[PROCESSOR] = simpleProcessor\n    this[GET_NAME] = simpleGetName\n    this[CREATE_COMPONENT] = simpleCreateComponent\n    this.processCSS = this.processCSS.bind(this)\n    this.createComponent = this.createComponent.bind(this)\n    this.use = this.use.bind(this)\n    this.before = this.before.bind(this)\n  }\n\n  /**\n   * Adds plugin into instance\n   *\n   * @param {function} plugin\n   *   The plugin function\n   * @return {Object}\n   */\n  use(plugin) {\n    this[plugin.stiligita] = plugin\n    return this.methods\n  }\n\n  /**\n   * Adds plugin into instance\n   *\n   * @param {function} plugin\n   *   The plugin function\n   * @return {Object}\n   */\n  before(plugin) {\n    switch (plugin.stiligita) {\n      case PROCESSOR:\n        this[PRE_PROCESSOR] = plugin\n        break\n      default:\n        break\n    }\n    return this.methods\n  }\n\n  get methods() {\n    return {\n      before: this.before,\n      use: this.use\n    }\n  }\n\n  /**\n   * Calls assigned pre-processor with arguments\n   *\n   * @param {Array} args\n   * @return {function}\n   */\n  preProcessCSS(...args) {\n    return this[PRE_PROCESSOR](...args)\n  }\n\n  /**\n   * Calls assigned processor with arguments\n   *\n   * @param {Array} args\n   * @return {function}\n   */\n  processCSS(...args) {\n    return this[PROCESSOR](...args)\n  }\n\n  /**\n   * Calls assigned processor with arguments\n   *\n   * @param {Array} args\n   * @return {function}\n   */\n  getName(...args) {\n    return this[GET_NAME](...args)\n  }\n\n  /**\n   * Calls assigned renderer with arguments\n   *\n   * @param {Array} args\n   * @return {function}\n   */\n  createComponent(...args) {\n    return this[CREATE_COMPONENT](...args)\n  }\n}\n\n// Export one instance\nexport default new Renderer()\n"]}