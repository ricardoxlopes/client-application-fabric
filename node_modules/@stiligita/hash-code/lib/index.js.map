{"version":3,"sources":["../src/index.js"],"names":["ensureSelector","selector","match","hashCode","str","split","reduce","a","b","charCodeAt","toString","replace"],"mappings":";;;;;AAAA;;;;;;AAMA,IAAMA,iBAAiB,SAAjBA,cAAiB;AAAA,SAAYC,SAAS,CAAT,EAAYC,KAAZ,CAAkB,OAAlB,UAAiCD,QAAjC,GAA8CA,QAA1D;AAAA,CAAvB;;AAEA;;;;;;;;AAQA,IAAME,WAAW,SAAXA,QAAW;AAAA,SAAOH,eAAeI,IAAIC,KAAJ,CAAU,EAAV,EAAcC,MAAd,CAAqB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACpED,QAAK,CAACA,KAAK,CAAN,IAAWA,CAAZ,GAAiBC,EAAEC,UAAF,CAAa,CAAb,CAArB;AACA,WAAOF,IAAIA,CAAX;AACD,GAHsC,EAGpC,CAHoC,EAGjCG,QAHiC,CAGxB,EAHwB,EAGpBC,OAHoB,CAGZ,GAHY,EAGP,GAHO,CAAf,CAAP;AAAA,CAAjB;;kBAKeR,Q","file":"index.js","sourcesContent":["/**\n * Prefixes a string with an underscore if the first character is a number\n *\n * @param {String} selector\n * @return {String}\n */\nconst ensureSelector = selector => selector[0].match(/[0-9]/) ? `_${selector}` : selector\n\n/**\n * Creates a hash from a String and then converts it to a base 36 String.\n *\n * @param {String} str\n * The string that should be converted to a hash\n * @todo This is not safe ðŸ¤¡\n * @return {String}\n */\nconst hashCode = str => ensureSelector(str.split('').reduce((a, b) => {\n  a = ((a << 5) - a) + b.charCodeAt(0)\n  return a & a\n}, 0).toString(36).replace('-', '_'))\n\nexport default hashCode\n"]}