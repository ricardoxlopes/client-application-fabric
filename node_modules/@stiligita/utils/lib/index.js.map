{"version":3,"sources":["../src/index.js"],"names":["isTruthy","input","reject","undefined","indexOf","isFalsy","ensureTruthy","fallback","filterObject","Object","keys","obj","filter","key","map","prop","reduce","a","b","assign","cleanObject","removals"],"mappings":";;;;;;;;AAAA;;;;;;;;;AASO,IAAMA,8BAAW,SAAXA,QAAW,CAACC,KAAD;AAAA,MAAQC,MAAR,uEAAiB,CAACC,SAAD,EAAY,IAAZ,EAAkB,KAAlB,CAAjB;AAAA,SAA8CD,OAAOE,OAAP,CAAeH,KAAf,IAAwB,CAAtE;AAAA,CAAjB;;AAEP;;;;;;;;;AASO,IAAMI,4BAAU,SAAVA,OAAU,CAACJ,KAAD;AAAA,MAAQC,MAAR,uEAAiB,CAACC,SAAD,EAAY,IAAZ,EAAkB,KAAlB,CAAjB;AAAA,SAA8C,CAACH,SAASC,KAAT,EAAgBC,MAAhB,CAA/C;AAAA,CAAhB;;AAEP;;;;;;;;;;;AAWO,IAAMI,sCAAe,SAAfA,YAAe,CAACL,KAAD;AAAA,MAAQM,QAAR,uEAAmB,EAAnB;AAAA,MAAuBL,MAAvB,uEAAgC,CAACC,SAAD,EAAY,IAAZ,EAAkB,KAAlB,CAAhC;AAAA,SAC1BE,QAAQJ,KAAR,EAAeC,MAAf,IAAyBK,QAAzB,GAAoCN,KADV;AAAA,CAArB;;AAGP;;;;;;;AAOO,IAAMO,sCAAe,SAAfA,YAAe;AAAA,SAAOC,OAAOC,IAAP,CAAYC,GAAZ,EAChCC,MADgC,CACzB;AAAA,WAAOZ,SAASW,IAAIE,GAAJ,CAAT,CAAP;AAAA,GADyB,EAEhCC,GAFgC,CAE5B;AAAA,+BAAWC,IAAX,EAAkBJ,IAAII,IAAJ,CAAlB;AAAA,GAF4B,EAGhCC,MAHgC,CAGzB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUT,OAAOU,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqBC,CAArB,CAAV;AAAA,GAHyB,EAGU,EAHV,CAAP;AAAA,CAArB;;AAKP;;;;;;;;;AASO,IAAME,oCAAc,SAAdA,WAAc,CAACT,GAAD,EAAMU,QAAN;AAAA,SAAmBZ,OAAOC,IAAP,CAAYC,GAAZ,EAC3CC,MAD2C,CACpC;AAAA,WAAOZ,SAASa,GAAT,EAAcQ,QAAd,CAAP;AAAA,GADoC,EAE3CP,GAF2C,CAEvC;AAAA,+BAAWC,IAAX,EAAkBJ,IAAII,IAAJ,CAAlB;AAAA,GAFuC,EAG3CC,MAH2C,CAGpC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUT,OAAOU,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqBC,CAArB,CAAV;AAAA,GAHoC,EAGD,EAHC,CAAnB;AAAA,CAApB","file":"index.js","sourcesContent":["/**\n * Determines if truthy.\n *\n * @param {*} input\n *   The input\n * @param {Array} reject\n *   A list of items that will be rejected if they match\n * @return {boolean} True if truthy, False otherwise.\n */\nexport const isTruthy = (input, reject = [undefined, null, false]) => reject.indexOf(input) < 0\n\n/**\n * Determines if falsy.\n *\n * @param {*} input\n *   The input\n * @param {Array} reject\n *   A list of items that will be rejected if they match\n * @return {boolean} True if falsy, False otherwise.\n */\nexport const isFalsy = (input, reject = [undefined, null, false]) => !isTruthy(input, reject)\n\n/**\n * { lambda_description }\n *\n * @param {*} input\n *   The input\n * @param {string} fallback\n *   The fallback\n * @param {Array} reject\n *   A list of items that will be rejected if they match\n * @return {*}\n */\nexport const ensureTruthy = (input, fallback = '', reject = [undefined, null, false]) =>\n  isFalsy(input, reject) ? fallback : input\n\n/**\n * Filters an object by its falsy props\n *\n * @param {Object} obj\n *   The object original object\n * @return {Object} The filtered object\n */\nexport const filterObject = obj => Object.keys(obj)\n  .filter(key => isTruthy(obj[key]))\n  .map(prop => ({[prop]: obj[prop]}))\n  .reduce((a, b) => Object.assign({}, a, b), {})\n\n/**\n * Claens an object by a list of removals\n *\n * @param {Object} obj\n *   The object original object\n * @param {Array} removals\n *   A list of items that will be removed if they match\n * @return {Object} The cleaned object\n */\nexport const cleanObject = (obj, removals) => Object.keys(obj)\n  .filter(key => isTruthy(key, removals))\n  .map(prop => ({[prop]: obj[prop]}))\n  .reduce((a, b) => Object.assign({}, a, b), {})\n\n"]}